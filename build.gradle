plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	id 'com.palantir.docker' version '0.35.0'
	id 'com.palantir.docker-run' version '0.35.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}

//To build docker image ./gradlew docker
docker {
	name "${project.name}:${project.version}"
	dockerfile file('Dockerfile')
	files 'docker/entrypoint.sh', "$buildDir/libs/"
}
dockerPrepare.dependsOn bootJar
dockerPrepare.dependsOn jar
docker.dependsOn build
String imageName = "${project.name}:${project.version}"

//To run docker container use ./gradlew dockerRun
dockerRun {
	name "${project.name}-container"
	image imageName
	ports '8081:8080'
//	env 'SPRING_PROFILES_ACTIVE': 'dev'
	daemonize true
	clean true
}


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.h2database:h2'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

tasks.named('test') {
	useJUnitPlatform()
}



